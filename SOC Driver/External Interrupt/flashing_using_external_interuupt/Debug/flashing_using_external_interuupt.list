
flashing_using_external_interuupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080003b0  080003b0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b0  080003b0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b4  080003b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080003b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  080003c0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080003c0  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cd0  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004c7  00000000  00000000  00020d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d0  00000000  00000000  000211c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000188  00000000  00000000  00021398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f7a  00000000  00000000  00021520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001678  00000000  00000000  0002249a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078dcc  00000000  00000000  00023b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009c8de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000578  00000000  00000000  0009c95c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08000398 	.word	0x08000398

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08000398 	.word	0x08000398

0800014c <CLOCK_INT>:

volatile R_ODR_t *R_ODR=(volatile R_ODR_t *)(GPIO+0x0c);

//set clock for
void CLOCK_INT(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	RCC_APB2ENR|=IOPAEN;
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <CLOCK_INT+0x24>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <CLOCK_INT+0x24>)
 8000156:	f043 0304 	orr.w	r3, r3, #4
 800015a:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR|=AFIOEN;
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <CLOCK_INT+0x24>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <CLOCK_INT+0x24>)
 8000162:	f043 0301 	orr.w	r3, r3, #1
 8000166:	6013      	str	r3, [r2, #0]
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	40021018 	.word	0x40021018

08000174 <SET_INT>:
//Function SET_INT to set all Register For External interrupt.
void SET_INT(void)
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
	NVIC_ISER0|=1<<6; // enable for interuupt number 6 which is an external interrrupt number 0
 8000178:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <SET_INT+0x30>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a09      	ldr	r2, [pc, #36]	; (80001a4 <SET_INT+0x30>)
 800017e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000182:	6013      	str	r3, [r2, #0]
	EXTI_RTSR|=1<<0;
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <SET_INT+0x34>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a07      	ldr	r2, [pc, #28]	; (80001a8 <SET_INT+0x34>)
 800018a:	f043 0301 	orr.w	r3, r3, #1
 800018e:	6013      	str	r3, [r2, #0]
	EXTI_IMR|=(1<<0);
 8000190:	4b06      	ldr	r3, [pc, #24]	; (80001ac <SET_INT+0x38>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a05      	ldr	r2, [pc, #20]	; (80001ac <SET_INT+0x38>)
 8000196:	f043 0301 	orr.w	r3, r3, #1
 800019a:	6013      	str	r3, [r2, #0]

}
 800019c:	bf00      	nop
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100
 80001a8:	40010408 	.word	0x40010408
 80001ac:	40010400 	.word	0x40010400

080001b0 <SET_GPIO>:
void SET_GPIO(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	GPIO_CRH&=0xff0fffff;
 80001b4:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <SET_GPIO+0x30>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <SET_GPIO+0x30>)
 80001ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001be:	6013      	str	r3, [r2, #0]
	GPIO_CRH|=0x00200000;
 80001c0:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <SET_GPIO+0x30>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <SET_GPIO+0x30>)
 80001c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001ca:	6013      	str	r3, [r2, #0]
	AFIO_EXT1CR1 &=0;  //set pin0 port a to get interrupt
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <SET_GPIO+0x34>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <SET_GPIO+0x34>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	40010804 	.word	0x40010804
 80001e4:	40021008 	.word	0x40021008

080001e8 <main>:
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	CLOCK_INT();
 80001ec:	f7ff ffae 	bl	800014c <CLOCK_INT>
	SET_GPIO();
 80001f0:	f7ff ffde 	bl	80001b0 <SET_GPIO>
	SET_INT();
 80001f4:	f7ff ffbe 	bl	8000174 <SET_INT>
	while(1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x10>
	...

080001fc <EXTI0_IRQHandler>:

	}

}
void EXTI0_IRQHandler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
		int i=0,u=0;
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	2300      	movs	r3, #0
 8000208:	603b      	str	r3, [r7, #0]
		for(u=0;u<20;u++)
 800020a:	2300      	movs	r3, #0
 800020c:	603b      	str	r3, [r7, #0]
 800020e:	e024      	b.n	800025a <EXTI0_IRQHandler+0x5e>
		{
		R_ODR->bit.P_13=0;
 8000210:	4b19      	ldr	r3, [pc, #100]	; (8000278 <EXTI0_IRQHandler+0x7c>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	8813      	ldrh	r3, [r2, #0]
 8000216:	f36f 334d 	bfc	r3, #13, #1
 800021a:	8013      	strh	r3, [r2, #0]
		for(i=0;i<33000;i++);
 800021c:	2300      	movs	r3, #0
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	e002      	b.n	8000228 <EXTI0_IRQHandler+0x2c>
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	3301      	adds	r3, #1
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f248 02e7 	movw	r2, #32999	; 0x80e7
 800022e:	4293      	cmp	r3, r2
 8000230:	ddf7      	ble.n	8000222 <EXTI0_IRQHandler+0x26>
		R_ODR->bit.P_13=1;
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <EXTI0_IRQHandler+0x7c>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	8813      	ldrh	r3, [r2, #0]
 8000238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800023c:	8013      	strh	r3, [r2, #0]
		for(i=0;i<33000;i++);
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e002      	b.n	800024a <EXTI0_IRQHandler+0x4e>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f248 02e7 	movw	r2, #32999	; 0x80e7
 8000250:	4293      	cmp	r3, r2
 8000252:	ddf7      	ble.n	8000244 <EXTI0_IRQHandler+0x48>
		for(u=0;u<20;u++)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	603b      	str	r3, [r7, #0]
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	2b13      	cmp	r3, #19
 800025e:	ddd7      	ble.n	8000210 <EXTI0_IRQHandler+0x14>
		}

	//after finish we must disable pending register to not go into loop of interrrupt.
	EXTI_PR|=1<<0;
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <EXTI0_IRQHandler+0x80>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a05      	ldr	r2, [pc, #20]	; (800027c <EXTI0_IRQHandler+0x80>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000000 	.word	0x20000000
 800027c:	40010414 	.word	0x40010414

08000280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000290:	e7fe      	b.n	8000290 <HardFault_Handler+0x4>

08000292 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000296:	e7fe      	b.n	8000296 <MemManage_Handler+0x4>

08000298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800029c:	e7fe      	b.n	800029c <BusFault_Handler+0x4>

0800029e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <UsageFault_Handler+0x4>

080002a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002cc:	f000 f82e 	bl	800032c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	; (8000318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000306:	f7ff ffe5 	bl	80002d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030a:	f000 f821 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ff6b 	bl	80001e8 <main>
  bx lr
 8000312:	4770      	bx	lr
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800031c:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000320:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000324:	20000028 	.word	0x20000028

08000328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC1_2_IRQHandler>
	...

0800032c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <HAL_IncTick+0x1c>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	461a      	mov	r2, r3
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <HAL_IncTick+0x20>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4413      	add	r3, r2
 800033c:	4a03      	ldr	r2, [pc, #12]	; (800034c <HAL_IncTick+0x20>)
 800033e:	6013      	str	r3, [r2, #0]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	20000004 	.word	0x20000004
 800034c:	20000024 	.word	0x20000024

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	2500      	movs	r5, #0
 8000354:	4e0c      	ldr	r6, [pc, #48]	; (8000388 <__libc_init_array+0x38>)
 8000356:	4c0d      	ldr	r4, [pc, #52]	; (800038c <__libc_init_array+0x3c>)
 8000358:	1ba4      	subs	r4, r4, r6
 800035a:	10a4      	asrs	r4, r4, #2
 800035c:	42a5      	cmp	r5, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	f000 f81a 	bl	8000398 <_init>
 8000364:	2500      	movs	r5, #0
 8000366:	4e0a      	ldr	r6, [pc, #40]	; (8000390 <__libc_init_array+0x40>)
 8000368:	4c0a      	ldr	r4, [pc, #40]	; (8000394 <__libc_init_array+0x44>)
 800036a:	1ba4      	subs	r4, r4, r6
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	42a5      	cmp	r5, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000378:	4798      	blx	r3
 800037a:	3501      	adds	r5, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000382:	4798      	blx	r3
 8000384:	3501      	adds	r5, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
